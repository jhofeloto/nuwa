generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  name          String?
  email         String    @unique
  role          Role      @default(GESTOR)
  password      String
  id            String    @id @default(uuid())
  createdAt     DateTime  @default(now())
  emailVerified DateTime?
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  projects      Project[]
  sessions      Session[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String   
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model MathModels {
  id   String @id @default(uuid()) 
  name String @unique
}

model Species {
  id              String    @id @default(uuid()) 
  common_name     String    @unique
  scientific_name String    @unique
  family          String?
  functional_type String?
  values          Json
  comments        String?
  parcels         Parcels[]
}

model Keyword {
  id              String           @id @default(uuid()) 
  name            String           @unique
  projectKeywords ProjectKeyword[]
}

model Ecosystem {
  description String?
  values      Json
  type        String     @unique
  id          String     @id @default(uuid()) 
  coverages   Coverage[]
  parcels     Parcels[]
}

model Project {
  id          String           @id @default(uuid()) 
  title       String           
  country     String?          
  status      Status           @default(Seed)
  department  String?          
  values      Json?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  creatorId   String           
  description String?
  name        String           @unique
  contracts   Contracts[]
  parcels     Parcels[]
  creator     User             @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  keywords    ProjectKeyword[]
}

model ProjectKeyword {
  projectId String  
  keywordId String  
  keyword   Keyword @relation(fields: [keywordId], references: [id], onDelete: Cascade)
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@id([projectId, keywordId])
}

model Parcels {
  id           String           @id @default(uuid()) 
  name         String           @unique
  projectId    String?          
  ecosystemId  String?          
  speciesId    String           
  area         Decimal?
  municipality String?
  department   String?
  cadastral_id String?
  geolocation  Json?
  polygon      Json?
  area_factor  Int              @default(0)
  analysis     ParcelAnalysis[]
  ecosystem    Ecosystem?       @relation(fields: [ecosystemId], references: [id])
  project      Project?         @relation(fields: [projectId], references: [id])
  species      Species          @relation(fields: [speciesId], references: [id])
}

model Coverage {
  id          String     @id @default(uuid()) 
  ecosystemId String?    
  description String?
  type        String?
  index       Index      @default(NDVI)
  values      Json
  ecosystem   Ecosystem? @relation(fields: [ecosystemId], references: [id])
}

model ParcelAnalysis {
  id           String       @id @default(uuid()) 
  parcelId     String       
  analysisType AnalysisType @default(ML)
  values       Json
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  parcel       Parcels      @relation(fields: [parcelId], references: [id], onDelete: Cascade)
}

model Contracts {
  contractId      String         @id @unique
  projectId       String?        
  contractName    String
  contractType    String
  contractAddress String?
  compiledCode    Json
  tokenName       String?
  lockTxHash      String?
  active          Boolean
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  project         Project?       @relation(fields: [projectId], references: [id], onDelete: Cascade)
  transactions    Transactions[]
}

model Transactions {
  transactionId    String     @id @unique
  contractId       String?
  from             String
  to               String
  value            BigInt
  assets           Json?
  timestamp        DateTime
  lockedInContract Boolean    @default(false)
  contract         Contracts? @relation(fields: [contractId], references: [contractId], onDelete: Cascade)
}

enum Role {
  GESTOR
  ADMIN
}

enum Status {
  Seed
  InProgress
  Finished
  Canceled
}

enum Index {
  NDVI
  NDWI
  SAVI
  OSAVI
}

enum AnalysisType {
  MANUAL
  ML
}
